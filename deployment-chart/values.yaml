dockerize_version: v0.6.1

kubernetes-dashboard:
  service:
    enableSkipLogin: true
  enableInsecureLogin: true
  enableSkipLogin: true
  serviceAccount:
    name: admin
  rbac:
    create: true
    clusterAdminRole: true

kafka:
  nodeSelector:
    node-role.kubernetes.io/master: ""
  replicaCount: 2
  persistence:
    enabled: false
  readinessProbe:
  zookeeper:
    persistence:
      enabled: false
    readinessProbe:
      enabled: false

global:
  location: "47e66e27320fa19b"
  nodeNum: "7"
  api_configmap:
    name: "services-api"
  database:
    prefix: "novapokemon"
    user: "root"
    mongodbRootPassword: "secretpassword"
  grafana:
    username: "admin"
    password: "admin"

  client:
    metricsPort: 8080
  services:
    auth:
      image: "novapokemon/authentication:latest"
      name: "authentication"
      port: 8001
      n_replicas: 2
      serviceName: "authentication-service"
      databaseName: "usersdb"
      databasePort: 27017
      serviceNameHeadless: "authentication-service-headless"

    battles:
      name: "battles"
      n_replicas: 2
      port: 8002
      image: "novapokemon/battles:latest"
      serviceName: "battles-service"
      serviceNameHeadless: "battles-service-headless"

    gym:
      name: "gym"
      n_replicas: 2
      port: 8003
      image: "novapokemon/gym:latest"
      serviceNameHeadless: "gym-service-headless"
      databaseName: "gymsdb"

    location:
      name: "location"
      n_replicas: 4
      port: 8004
      image: "novapokemon/location:latest"
      databaseName: "locationdb"
      databasePort: 27017
      serviceName: "location-service"
      serviceNameHeadless: "location-service-headless"

    microtransactions:
      name: "microtransactions"
      n_replicas: 2
      port: 8005
      image: "novapokemon/microtransactions:latest"
      serviceName: "microtransactions-service"
      databaseName: "microtransactionsdb"
      databasePort: 27017
      serviceNameHeadless: "microtransactions-service-headless"

    notifications:
      name: "notifications"
      port: 8006
      n_replicas: 3
      image: "novapokemon/notifications:latest"
      serviceName: "notifications-service"
      databaseName: "notificationsdb"
      databasePort: 27017
      serviceNameHeadless: "notifications-service-headless"

    store:
      name: "store"
      n_replicas: 2
      port: 8007
      image: "novapokemon/store:latest"
      serviceName: "store-service"
      serviceNameHeadless: "store-service-headless"

    trades:
      name: "trades"
      n_replicas: 2
      port: 8008
      image: "novapokemon/trades:latest"
      serviceName: "trades-service"
      serviceNameHeadless: "trades-service-headless"

    trainers:
      name: "trainers"
      n_replicas: 2
      port: 8009
      image: "novapokemon/trainers:latest"
      serviceName: "trainers-service"
      databaseName: "trainersdb"
      databasePort: 27017
      serviceNameHeadless: "trainers-service-headless"


trainersdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
    arbiter:
      nodeSelector:
        serversnode: "true"
  mongos:
    nodeSelector:
      serversnode: "true"
    replicas: 1
  configsvr:
    nodeSelector:
      serversnode: "true"
    persistence:
      enabled: false
    replicas: 1

usersdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    arbiter:
      nodeSelector:
        serversnode: "true"
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
  mongos:
    replicas: 1
    nodeSelector:
      serversnode: "true"
  configsvr:
    persistence:
      enabled: false
    replicas: 1
    nodeSelector:
      serversnode: "true"
  metrics:
    enabled: true


microtransactionsdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    arbiter:
      nodeSelector:
        serversnode: "true"
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
  mongos:
    replicas: 1
    nodeSelector:
      serversnode: "true"
  configsvr:
    persistence:
      enabled: false
    replicas: 1
    nodeSelector:
      serversnode: "true"
  metrics:
    enabled: true

locationdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    arbiter:
      nodeSelector:
        serversnode: "true"
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
  mongos:
    replicas: 1
    nodeSelector:
      serversnode: "true"
  configsvr:
    persistence:
      enabled: false
    replicas: 1
    nodeSelector:
      serversnode: "true"
  metrics:
    enabled: true

notificationsdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    arbiter:
      nodeSelector:
        serversnode: "true"
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
  mongos:
    replicas: 1
    nodeSelector:
      serversnode: "true"
  configsvr:
    persistence:
      enabled: false
    replicas: 1
    nodeSelector:
      serversnode: "true"
  metrics:
    enabled: true

gymsdb:
  image:
    registry: "docker.io"
    repository: "novapokemon/mongodb"
    tag: "latest"
  user: "root"
  mongodbRootPassword: "secretpassword"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  shards: 1
  shardsvr:
    arbiter:
      nodeSelector:
        serversnode: "true"
    persistence:
      enabled: false
    dataNode:
      replicas: 1
      nodeSelector:
        serversnode: "true"
  mongos:
    replicas: 1
    nodeSelector:
      serversnode: "true"
  configsvr:
    persistence:
      enabled: false
    replicas: 1
    nodeSelector:
      serversnode: "true"
  metrics:
    enabled: true

elasticsearch-logging:
  antiAffinity: "soft"
  esJavaOpts: "-Xmx1g -Xms1g"
  replicas: 1
  nodeSelector:
    node-role.kubernetes.io/master: ""
  podSecurityContext:
    fsGroup: 20001
    runAsUser: 5026
  securityContext:
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 5026
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 5G
  clusterHealthCheckParams: wait_for_status=yellow&timeout=30s

kibana:
  service:
    type: NodePort
    port: 5601
    nodePort: "30001"
    labels: { }
    annotations: { }
    loadBalancerSourceRanges: [ ]
  nodeSelector:
    serversnode: "true"

prometheus:
  nodeExporter:
    nodeSelector:
      node-role.kubernetes.io/master: ""
    securityContext:
      runAsNonRoot: true
      runAsUser: 5026
  alertmanager:
    persistentVolume:
      enabled: false
      existingClaim: "novapokemon-prometheus-alertmanager"
    nodeSelector:
      node-role.kubernetes.io/master: ""
    securityContext:
      runAsNonRoot: true
      runAsUser: 5026
  server:
    global:
      scrape_interval: 10s
      scrape_timeout: 3s
    persistentVolume:
      enabled: false
      existingClaim: "novapokemon-prometheus-server"
    nodeSelector:
      node-role.kubernetes.io/master: ""
    securityContext:
      runAsNonRoot: true
      runAsUser: 5026

grafana:
  sidecar:
    dashboards:
      enabled: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus-1
          type: prometheus
          url: http://novapokemon-prometheus-server
          access: proxy
          isDefault: true
  admin:
    existingSecret: "grafana-credentials"
  grafana.ini:
    server:
      root_url: "http://localhost:3000/grafana"